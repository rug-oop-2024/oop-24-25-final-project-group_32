import base64
from typing import Optional, Dict, List


class Artifact:
    def __init__(
        self,
        name: str,
        asset_path: str,
        version: str,
        data: bytes,
        type: str,
        metadata: Optional[Dict] = None,
        tags: Optional[List] = None,
    ) -> None:
        """
        Initialize the Artifact class.

        Args:
            name (str): The name of the artifact.
            asset_path (str): The asset path of the artifact.
            version (str): The version of the artifact.
            data (bytes): The data of the artifact.
            type (str): The type of the artifact.
            metadata (Optional[dict], optional): Metadata dictionary,
            default is None.
            tags (Optional[list], optional): List of tags associated
            with the artifact, default is None.
        """
        self._name = name
        self._asset_path = asset_path
        self._version = version
        self._data = data
        self._metadata = metadata if metadata is not None else {}
        self._type = type
        self._tags = tags if tags is not None else []
        self._id = base64.b64encode(self.asset_path.encode()).decode()

    @property
    def name(self) -> str:
        """
        Getter the name of the artifact.

        Returns:
            str: The name of the artifact
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Setter of the name of the artifact

        Args:
            name (str): The setted name for the artifact
        """
        self._name = name

    @property
    def asset_path(self) -> str:
        """
        Getter for the asset path of the artifact.

        Returns:
            str: The asset path
        """
        return self._asset_path

    @property
    def version(self) -> str:
        """
        Getter for the version of the artifact.

        Returns:
            str: the artifact version
        """
        return self._version

    @version.setter
    def version(self, version: str) -> None:
        """
        Setter for the version of the artifact

        Args:
            version (str): the setting version of the artifact
        """
        self._version = version

    @property
    def data(self) -> bytes:
        """
        Getter for the raw data of the artifact.

        Returns:
            bytes: The raw data of the artifact.
        """
        return self._data

    @property
    def metadata(self) -> dict:
        """
        Getter of the metadata dictionary associated with the artifact.

        Returns:
            dict: The metadata dictionary associated with the artifact.
        """
        return self._metadata

    @property
    def type(self) -> str:
        """
        Getter of the type of the artifact.

        Returns:
            str: The artifact type
        """
        return self._type

    @type.setter
    def type(self, type: str) -> None:
        """
        Setter for the artifact type

        Args:
            type (str): The artifact type
        """
        self._type = type

    @property
    def tags(self) -> list:
        """
        Getter of the list of tags associated with the artifact.

        Returns:
            list: The list of tags associated with the artifact
        """
        return self._tags

    @tags.setter
    def tags(self, tags: list) -> None:
        self._tags = tags

    @property
    def id(self) -> str:
        """
        Generates a unique ID for the artifact based
        on its asset path and version.
        The ID is generated by base64 encoding the asset path and
        appending the version.

        Returns:
            str: The unique ID of the artifact.
        """
        return f"{self._id}:{self.version}"

    def read(self) -> bytes:
        """
        Reads the data from the artifact.

        Raises:
            ValueError: If no data is available in the artifact.

        Returns:
            bytes: The data stored in the artifact.
        """
        if not self.data:
            raise ValueError("No data available in the artifact.")
        return self._data

    def save(self, new_data: bytes) -> bytes:
        """
        Saves new data to the artifact and returns the saved data.

        Args:
            new_data (bytes): The new data to store in the artifact.

        Returns:
            bytes: The saved data.
        """
        self._data = new_data
        return self.read()
